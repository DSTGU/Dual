use crate::shared::{pop_bit, BoardPosition};

const MG_PAWN_TABLE: [i32; 64] = [
82,  82,  82,  82,  82,  82,  82,  82,
180, 216, 143, 177, 150, 208, 116,  71,
76,  89, 108, 113, 147, 138, 107,  62,
68,  95,  88, 103, 105,  94,  99,  59,
55,  80,  77,  94,  99,  88,  92,  57,
56,  78,  78,  72,  85,  85, 115,  70,
47,  81,  62,  59,  67, 106, 120,  60,
82,  82,  82,  82,  82,  82,  82,  82,
];

const MG_KNIGHT_TABLE: [i32; 64] = [
170, 248, 303, 288, 398, 240, 322, 230,
264, 296, 409, 373, 360, 399, 344, 320,
290, 397, 374, 402, 421, 466, 410, 381,
328, 354, 356, 390, 374, 406, 355, 359,
324, 341, 353, 350, 365, 356, 358, 329,
314, 328, 349, 347, 356, 354, 362, 321,
308, 284, 325, 334, 336, 355, 323, 318,
232, 316, 279, 304, 320, 309, 318, 314,
];

const MG_BISHOP_TABLE: [i32; 64] = [
336, 369, 283, 328, 340, 323, 372, 357,
339, 381, 347, 352, 395, 424, 383, 318,
349, 402, 408, 405, 400, 415, 402, 363,
361, 370, 384, 415, 402, 402, 372, 363,
359, 378, 378, 391, 399, 377, 375, 369,
365, 380, 380, 380, 379, 392, 383, 375,
369, 380, 381, 365, 372, 386, 398, 366,
332, 362, 351, 344, 352, 353, 326, 344,
];

const MG_ROOK_TABLE: [i32; 64] = [
509, 519, 509, 528, 540, 486, 508, 520,
504, 509, 535, 539, 557, 544, 503, 521,
472, 496, 503, 513, 494, 522, 538, 493,
453, 466, 484, 503, 501, 512, 469, 457,
441, 451, 465, 476, 486, 470, 483, 454,
432, 452, 461, 460, 480, 477, 472, 444,
433, 461, 457, 468, 476, 488, 471, 406,
458, 464, 478, 494, 493, 484, 440, 451,
];

const MG_QUEEN_TABLE:[i32;64] = [
997, 1025, 1054, 1037, 1084, 1069, 1068, 1070,
1001, 986, 1020, 1026, 1009, 1082, 1053, 1079,
1012, 1008, 1032, 1033, 1054, 1081, 1072, 1082,
998, 998, 1009, 1009, 1024, 1042, 1023, 1026,
1016, 999, 1016, 1015, 1023, 1021, 1028, 1022,
1011, 1027, 1014, 1023, 1020, 1027, 1039, 1030,
990, 1017, 1036, 1027, 1033, 1040, 1022, 1026,
1024, 1007, 1016, 1035, 1010, 1000,  994,  975,
];

const MG_KING_TABLE:[i32; 64] = [
9935, 10023, 10016, 9985, 9944, 9966, 10002, 10013,
10029, 9999, 9980, 9993, 9992, 9996, 9962, 9971,
9991, 10024, 10002, 9984, 9980, 10006, 10022, 9978,
9983, 9980, 9988, 9973, 9970, 9975, 9986, 9964,
9951, 9999, 9973, 9961, 9954, 9956, 9967, 9949,
9986, 9986, 9978, 9954, 9956, 9970, 9985, 9973,
10001, 10007, 9992, 9936, 9957, 9984, 10009, 10008,
9985, 10036, 10012, 9946, 10008, 9972, 10024, 10014,
];

const EG_PAWN_TABLE: [i32; 64] = [
94,  94,  94,  94,  94,  94,  94,  94,
272, 267, 252, 228, 241, 226, 259, 281,
188, 194, 179, 161, 150, 147, 176, 178,
126, 118, 107,  99,  92,  98, 111, 111,
107, 103,  91,  87,  87,  86,  97,  93,
98, 101,  88,  95,  94,  89,  93,  86,
107, 102, 102, 104, 107,  94,  96,  87,
94,  94,  94,  94,  94,  94,  94,  94,
];

const EG_KNIGHT_TABLE: [i32; 64] = [
223, 243, 268, 253, 250, 254, 218, 182,
256, 273, 256, 279, 272, 256, 257, 229,
257, 261, 291, 290, 280, 272, 262, 240,
264, 284, 303, 303, 303, 292, 289, 263,
263, 275, 297, 306, 297, 298, 285, 263,
258, 278, 280, 296, 291, 278, 261, 259,
239, 261, 271, 276, 279, 261, 258, 237,
252, 230, 258, 266, 259, 263, 231, 217,
];

const EG_BISHOP_TABLE: [i32; 64] = [
    283, 276, 286, 289, 290, 288, 280, 273,
    289, 293, 304, 285, 294, 284, 293, 283,
    299, 289, 297, 296, 295, 303, 297, 301,
    294, 306, 309, 306, 311, 307, 300, 299,
    291, 300, 310, 316, 304, 307, 294, 288,
    285, 294, 305, 307, 310, 300, 290, 282,
    283, 279, 290, 296, 301, 288, 282, 270,
    274, 288, 274, 292, 288, 281, 292, 280,
];

const EG_ROOK_TABLE: [i32; 64] = [
    525, 522, 530, 527, 524, 524, 520, 517,
    523, 525, 525, 523, 509, 515, 520, 515,
    519, 519, 519, 517, 516, 509, 507, 509,
    516, 515, 525, 513, 514, 513, 511, 514,
    515, 517, 520, 516, 507, 506, 504, 501,
    508, 512, 507, 511, 505, 500, 504, 496,
    506, 506, 512, 514, 503, 503, 501, 509,
    503, 514, 515, 511, 507, 499, 516, 492,
];

const EG_QUEEN_TABLE: [i32; 64] = [
    927, 958, 958, 963, 963, 955, 946, 956,
    919, 956, 968, 977, 994, 961, 966, 936,
    916, 942, 945, 985, 983, 971, 955, 945,
    939, 958, 960, 981, 993, 976, 993, 972,
    918, 964, 955, 983, 967, 970, 975, 959,
    920, 909, 951, 942, 945, 953, 946, 941,
    914, 913, 906, 920, 920, 913, 900, 904,
    903, 908, 914, 893, 931, 904, 916, 895,
];

const EG_KING_TABLE: [i32; 64] = [
    9926, 9965, 9982, 9982, 9989, 10015, 10004, 9983,
    9988, 10017, 10014, 10017, 10017, 10038, 10023, 10011,
    10010, 10017, 10023, 10015, 10020, 10045, 10044, 10013,
    9992, 10022, 10024, 10027, 10026, 10033, 10026, 10003,
    9982, 9996, 10021, 10024, 10027, 10023, 10009, 9989,
    9981, 9997, 10011, 10021, 10023, 10016, 10007, 9991,
    9973, 9989, 10004, 10013, 10014, 10004, 9995, 9983,
    9947, 9966, 9979, 9989, 9972, 9986, 9976, 9957,
];

const MG_TABLES: [[i32; 64] ; 6] = [
    MG_PAWN_TABLE, MG_KNIGHT_TABLE,
    MG_BISHOP_TABLE, MG_ROOK_TABLE,
    MG_QUEEN_TABLE, MG_KING_TABLE
];

const EG_TABLES: [[i32; 64]; 6] = [
    EG_PAWN_TABLE, EG_KNIGHT_TABLE,
    EG_BISHOP_TABLE, EG_ROOK_TABLE,
    EG_QUEEN_TABLE, EG_KING_TABLE
];

pub fn mirror_sq(score: usize) -> usize {
    (7-score/8)*8+score%8
}
pub fn evaluate(board_position: &BoardPosition) -> i32 {
    let mut score : i32 = 0;

    let mut phase :i32 = 0;
    
    if board_position.occupancies[2].count_ones() < 18 {
        if board_position.occupancies[2].count_ones() < 9 { 
            phase = 9;
        }
        phase = 18 - board_position.occupancies[2].count_ones() as i32;
    }

    for p in 0..12 {
        let mut x = board_position.bitboards[p];
        
        while x > 0 {
            let square = x.trailing_zeros() as usize;
            
            if p > 5 {
                score -= ((9 - phase) * MG_TABLES[p-6][mirror_sq(square)]) + (phase * EG_TABLES[p-6][mirror_sq(square)]);
            } else {
                score += (9 - phase) * MG_TABLES[p][square] + phase * EG_TABLES[p][square];
            }
            
            pop_bit(&mut x, square);
        }
    }
    score = score/9;
    score * (board_position.side as i32 * 2 - 1 ) * -1
}