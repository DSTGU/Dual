use crate::shared::{pop_bit, BoardPosition};

const MG_PAWN_TABLE: [usize; 64] = [
82,  82,  82,  82,  82,  82,  82,  82,
180, 216, 143, 177, 150, 208, 116,  71,
76,  89, 108, 113, 147, 138, 107,  62,
68,  95,  88, 103, 105,  94,  99,  59,
55,  80,  77,  94,  99,  88,  92,  57,
56,  78,  78,  72,  85,  85, 115,  70,
47,  81,  62,  59,  67, 106, 120,  60,
82,  82,  82,  82,  82,  82,  82,  82,
];

const MG_KNIGHT_TABLE: [usize; 64] = [
170, 248, 303, 288, 398, 240, 322, 230,
264, 296, 409, 373, 360, 399, 344, 320,
290, 397, 374, 402, 421, 466, 410, 381,
328, 354, 356, 390, 374, 406, 355, 359,
324, 341, 353, 350, 365, 356, 358, 329,
314, 328, 349, 347, 356, 354, 362, 321,
308, 284, 325, 334, 336, 355, 323, 318,
232, 316, 279, 304, 320, 309, 318, 314,
];

const MG_BISHOP_TABLE: [usize; 64] = [
336, 369, 283, 328, 340, 323, 372, 357,
339, 381, 347, 352, 395, 424, 383, 318,
349, 402, 408, 405, 400, 415, 402, 363,
361, 370, 384, 415, 402, 402, 372, 363,
359, 378, 378, 391, 399, 377, 375, 369,
365, 380, 380, 380, 379, 392, 383, 375,
369, 380, 381, 365, 372, 386, 398, 366,
332, 362, 351, 344, 352, 353, 326, 344,
];

const MG_ROOK_TABLE: [usize; 64] = [
509, 519, 509, 528, 540, 486, 508, 520,
504, 509, 535, 539, 557, 544, 503, 521,
472, 496, 503, 513, 494, 522, 538, 493,
453, 466, 484, 503, 501, 512, 469, 457,
441, 451, 465, 476, 486, 470, 483, 454,
432, 452, 461, 460, 480, 477, 472, 444,
433, 461, 457, 468, 476, 488, 471, 406,
458, 464, 478, 494, 493, 484, 440, 451,
];

const MG_QUEEN_TABLE:[usize;64] = [
997, 1025, 1054, 1037, 1084, 1069, 1068, 1070,
1001, 986, 1020, 1026, 1009, 1082, 1053, 1079,
1012, 1008, 1032, 1033, 1054, 1081, 1072, 1082,
998, 998, 1009, 1009, 1024, 1042, 1023, 1026,
1016, 999, 1016, 1015, 1023, 1021, 1028, 1022,
1011, 1027, 1014, 1023, 1020, 1027, 1039, 1030,
990, 1017, 1036, 1027, 1033, 1040, 1022, 1026,
1024, 1007, 1016, 1035, 1010, 1000,  994,  975,
];

const MG_KING_TABLE:[usize; 64] = [
9935, 10023, 10016, 9985, 9944, 9966, 10002, 10013,
10029, 9999, 9980, 9993, 9992, 9996, 9962, 9971,
9991, 10024, 10002, 9984, 9980, 10006, 10022, 9978,
9983, 9980, 9988, 9973, 9970, 9975, 9986, 9964,
9951, 9999, 9973, 9961, 9954, 9956, 9967, 9949,
9986, 9986, 9978, 9954, 9956, 9970, 9985, 9973,
10001, 10007, 9992, 9936, 9957, 9984, 10009, 10008,
9985, 10036, 10012, 9946, 10008, 9972, 10024, 10014,
];

const MG_TABLES: [[usize; 64] ; 6] = [
    MG_PAWN_TABLE, MG_KNIGHT_TABLE,
    MG_BISHOP_TABLE, MG_ROOK_TABLE,
    MG_QUEEN_TABLE, MG_KING_TABLE
];

pub fn mirror_sq(score: usize) -> usize {
    (7-score/8)*8+score%8
}
pub fn evaluate(board_position: &BoardPosition) -> i32 {
    let mut score : i32 = 0;

    for p in 0..12 {
        let mut x = board_position.bitboards[p];
        
        while x > 0 {
            let square = x.trailing_zeros() as usize;
            
            if p > 5 {
                score -= MG_TABLES[p-6][mirror_sq(square)] as i32;
            } else {
                score += MG_TABLES[p][square] as i32;
            }
            
            pop_bit(&mut x, square);
        }
    }

    score * (board_position.side as i32 * 2 - 1 ) * -1
}